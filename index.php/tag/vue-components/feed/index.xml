<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Vue components &#8211; The SIGMA</title>
	<atom:link href="/index.php/tag/vue-components/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>&#60;For Those Who Code/&#62;</description>
	<lastBuildDate>
	Sat, 02 Mar 2019 16:57:34 +0000	</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.1.1</generator>
	<item>
		<title>VueJs 2 &#8211; 06 Vue components</title>
		<link>/index.php/2018/04/22/vuejs-2-06/</link>
				<comments>/index.php/2018/04/22/vuejs-2-06/#respond</comments>
				<pubDate>Sun, 22 Apr 2018 18:25:56 +0000</pubDate>
		<dc:creator><![CDATA[Prasad Kavinda]]></dc:creator>
				<category><![CDATA[VueJs]]></category>
		<category><![CDATA[web development]]></category>
		<category><![CDATA[Vue]]></category>
		<category><![CDATA[Vue components]]></category>

		<guid isPermaLink="false">/?p=902</guid>
				<description><![CDATA[<p><span class="rt-reading-time" style="display: block;"><span class="rt-label">Reading Time: </span> <span class="rt-time">4</span> <span class="rt-label rt-postfix">minutes</span></span> හැමෝටම ආයුබෝවන්, VueJs ගැන ලියන 6 වෙනි post එකෙන් මම මේ කියන්න යන්නෙ Vue වල තියෙන ඉතා වැදගත් feature එකක් වෙන Vue components ගැන. Vue ගැන ලියපු කලින් posts බැලුවෙ නැත්තම් මෙතනින් ගිහින් බලන්න. අපි vue app එකක් ලියද්දි, ඒ app එකට අදාල template එක(html markup එක), app එක mount<a class="moretag" href="/index.php/2018/04/22/vuejs-2-06/"> Read more&#8230;</a></p>
<p>The post <a rel="nofollow" href="/index.php/2018/04/22/vuejs-2-06/">VueJs 2 &#8211; 06 Vue components</a> appeared first on <a rel="nofollow" href="/">The SIGMA</a>.</p>
]]></description>
								<content:encoded><![CDATA[<span class="rt-reading-time" style="display: block;"><span class="rt-label">Reading Time: </span> <span class="rt-time">4</span> <span class="rt-label rt-postfix">minutes</span></span><p><span style="font-weight: 400;">හැමෝටම ආයුබෝවන්, VueJs ගැන ලියන 6 වෙනි post එකෙන් මම මේ කියන්න යන්නෙ Vue වල තියෙන ඉතා වැදගත් feature එකක් වෙන Vue components ගැන. Vue ගැන ලියපු කලින් posts බැලුවෙ නැත්තම් <a href="/index.php/category/vuejs/">මෙතනින්</a> ගිහින් බලන්න.</span></p>
<p><span style="font-weight: 400;">අපි vue app එකක් ලියද්දි, ඒ app එකට අදාල template එක(html markup එක), app එක mount කරල තියෙන element එක ඇතුලෙ (index.html එක අැතුලෙ) කෙලින්ම ලියන්න පුළුවන්. මම කලින් උදාහරණවලදි කරා වගේ</span></p>
<pre>const app = new Vue({
    el: '#my-app',
    data: { name: 'John Doe' }
});
</pre>
<pre>&lt;div id="my-app"&gt;
    &lt;h1&gt;Hello, {{ name }} &lt;/h1&gt;
&lt;/div&gt;</pre>
<p><span style="font-weight: 400;">එහෙම නැත්තම්, app.js file එකේ තියෙන vue instance එක ඇතුලෙම template කියන property එකට, String එකක් විදියට දෙන්නත් පුළුවන්. මේ වගේ.</span></p>
<pre>const app = new Vue({
    el: '#my-app',
    template: `&lt;h1&gt;Hello, {{ name }}&lt;/h1&gt;`,
    data: { name: 'John Doe' }
});
</pre>
<p><span style="font-weight: 400;">දැන් මේ template එක, #my-app element එක ඇතුලෙ render වෙනව.</span></p>
<p><span style="font-weight: 400;">හැබැයි මේ විදියට ලියද්දි, template එකේ තියෙන elements, හැම තිස්සෙම තනි root element එකක් ඇතුලෙ තියෙන්න ඕනෙ. තේරුනේ නැත්තම් මේක බලන්නකො.</span></p>
<pre>const app = new Vue({
    el: '#my-app',
    template: `
        &lt;h1&gt;Hello, {{ name }}&lt;/h1&gt;
        &lt;p&gt;who are you?&lt;/p&gt;
    `,
    data: { name: 'John Doe' }
});
</pre>
<p>මෙතනදි template එක විදියට elements 2ක් තියෙනව.(h1 එකක් සහ paragraph එකක්) ⁣ඒ දෙකම root level elements. ඒ නිසා මේක run වෙන්නෙ නැහැ. error එකක් එනව. මේක run වෙන්න නම් පහල තියෙන විදියට div එකකින් මේක wrap කරන්න පුළුවන්.</p>
<pre>const app = new Vue({
    el: '#my-app',
    template: `
        &lt;div&gt;
            &lt;h1&gt;Hello, {{ name }}&lt;/h1&gt;
            &lt;p&gt;who are you?&lt;/p&gt;
        &lt;/div&gt;
    `,
    data: { name: 'John Doe' }
});
</pre>
<p>දැන් ඔක්කොම elements තියෙන්නෙ div කියන root element එකේ නිසා ප්‍රශ්නයක් වෙන්නෙ නැහැ.</p>
<p><span style="font-weight: 400;">මේ මොන විදියට කරත්, app එකක් හදද්දි, මෙහෙම එකම template එකක් දිගට ලියාගෙන යද්දි, ඒක ගොඩක් සංකීර්ණ වෙන්න පුළුවන්. ඒ නිසා තමයි Vue components කියල දෙයක් තියෙන්නෙ. Vue component එකක් කියන්නෙ, app එකේ කුඩා කොටසක් වගේ. අපේ app එක කොටස් වලට වෙන් කරල, ඒ එක එක කොටස vue components  විදියට හදන්න පුළුවන්. උදාහරණයක් විදියට, ඔයාල blog එකක් හදනවනම්, ඒකෙ navbar එක වෙනම component එකක් විදියට හදන්න පුළුවන්. Blog post තව component එකක් විදියට හදන්න පුළුවන්. Post එකේ comments තව component එකක්. footer එක තව component එකක්. මේ වගේ ඔයාල කැමති විදියකට components වලට වෙන් කරන්න පුළුවන්. දැන් මේ components එකතු කරල app එක හදාගන්න පුළුවන්. Vue components නැවත නැවත භාවිතා කරන්නත් පුළුවන් නිසා ඒක සෑහෙන්න පහසුවක් වෙනව. App එකේ එක එක කොටස, එක එක component එකෙන් control වෙන නිසා, app එක maintain කරන එකත් ලේසියි.</span></p>
<p><span style="font-weight: 400;">Vue component එකක් මේ විදියට හදන්න පුළුවන්. මේ components හදන්නෙ Vue object එකට එළියෙන්, Vue object එකට කලින්.</span></p>
<pre>Vue.component('test', {});
</pre>
<p>මෙතනදි පළවෙනි parameter එක විදියට දෙන්න ඕනෙ, component එකේ නම(test). දෙවනි parameter එක විදියට දෙන්නෙ object එකක්. ඒ object එකේ තියෙන්නෙ component එකට අදාල properties. Vue instance එකට pass කරන object එක වගේම object එකක් තමයි මේකත්. ඒකෙදි වගේම data, methods, template, created වගේ properties define කරන්න පුලුවන්.(හැබැයි el වගේ root vue instance එකට විශේෂිත වුනු properties define කරන්න බැහැ.) ඒ define කරන properties අදාල වෙන්නෙ, ඒව define කරල තියෙන component එකට විතරයි.</p>
<pre>Vue.component('test', {
    template: '&lt;h1&gt;Hello! This is a Vue Component&lt;/h1&gt;'
});

const app = new Vue({
 el: '#my-app',
});
</pre>
<p><span style="font-weight: 400;">මේ විදිය හදා ගත්ත component එක, app එක mount කරල තියෙන element එක(#my-app) ඇතුලෙ ඕන තැනක භාවිතා කරන්න පුළුවන්. හරියට custom html element එකක් වගේ. මේ විදියට.</span></p>
<pre>&lt;div id="my-app"&gt;
    &lt;test&gt;&lt;/test&gt;
&lt;/div&gt;</pre>
<p><span style="font-weight: 400;"> දැන් මේක run කරාම, මේ වගේ output එකක් බලාගන්න පුලුවන් වෙයි. ඔයාලට බලාගන්න පුළුවන් test කියන tag එක වෙනුවට, test component එකේ තියෙන template එක render වෙලා තියෙනව.</span></p>
<p><img class="wp-image-935 aligncenter" src="/wp-content/uploads/2018/04/first-component-300x159.png" alt="Vue component example" width="826" height="438" srcset="/wp-content/uploads/2018/04/first-component-300x159.png 300w, /wp-content/uploads/2018/04/first-component-768x406.png 768w, /wp-content/uploads/2018/04/first-component.png 1536w" sizes="(max-width: 826px) 100vw, 826px" /></p>
<h4><strong>data is a function</strong></h4>
<p>Vue component වලට අදාලව වෙනම data, methods වගේ properties define කරන්න පුලුවන් කියල මම කලින් කිව්වනෙ. හැබැයි component එකක් ඇතුලෙ define කරන data property එකේ පොඩි වෙනසක් තියෙනව. කලින් අපි, main Vue instance එකේදි, data property එක object එකක් විදියට තමයි define කරේ. හැබැයි component එකක් ඇතුලෙදි ඒක function එකක් විදියට තමයි define කරන්න ඕනෙ. ඒ function එකෙන් object එකක් return කරන්න ඕනෙ. ඒ object එකේ තමයි component එකට අදාල data define කරන්නෙ. data කියන property එක විතරයි මේ විදියට වෙනස් වෙන්න ඕනෙ. අනිත් ඒවයි වෙනසක් නැහැ. පහලින් තියෙන්නෙ component එකක් ඇතුලෙ data property එක define කරන්න විදිය.</p>
<pre>Vue.component('test', {
    template: '&lt;h1&gt; {{message}} &lt;/h1&gt;',
    data: function () {
        return {
            message: 'Hello! This is a Vue Component'
        }
    }
});

const app = new Vue({
    el: '#my-app',
});
</pre>
<p>මම කලිනුත් කිව්ව, එක Vue component එකක්, අපි කැමති වතාවක් නැවත නැවත භාවිතා කරන්න පුළුවන් කියල. එහෙම භාවිතා කරාම, ඒ එකම component එකේ විවිද instances, එක්නෙකින් ස්වායත්තව තමයි වැඩ කරන්නෙ. පහල උදාහරණය බලන්නකො.</p>
<pre>Vue.component('test', {
    template: `
        &lt;div&gt;
            &lt;h1&gt; count: {{ count }} &lt;/h1&gt;
            &lt;button @click="count++"&gt;count++&lt;/button&gt;
        &lt;/div&gt;
    `,
    data: function () {
        return {
            count: 0,
        }
    }
});

const app = new Vue({
    el: '#my-app',
});

</pre>
<pre>&lt;div id="my-app"&gt;
    &lt;test&gt;&lt;/test&gt;
    &lt;test&gt;&lt;/test&gt;
&lt;/div&gt;
</pre>
<p>මෙතනදි test කියන component එක දෙපාරක් භාවිතා කරල තියෙනව. ඒනිසා count++ කියල button 2ක් තියෙනව. හැබැයි මේ button click කරද්දි ඒ ඒ button එකට අදාල instance එකේ count එක විතරයි increment වෙන්නෙ. එකම component එකේ instance 2 ක් උනාට, ඒ දෙක වෙන වෙනම තමයි වැඩ කරන්නෙ. හරියට වෙනස් component 2 ක් වගේ.</p>
<p>දැන් ඔයාලට Vue components කියන්නෙ මොනවද කියල පොඩි හරි අදහසක් එන්න ඇති කියල හිතනව. අදට මෙතනින් නවතින්නම්. post එක ගැන අදහස්, යෝජනා, ඡෝදනා, ප්‍රශ්න මොනවම හරි තියෙනම් comment එකක් දාන්න. 😀</p>
<p>ඊළඟ post එකට <a href="/index.php/2018/05/01/vuejs-2-07/">මෙතනින්</a> යන්න.</p>
<p>The post <a rel="nofollow" href="/index.php/2018/04/22/vuejs-2-06/">VueJs 2 &#8211; 06 Vue components</a> appeared first on <a rel="nofollow" href="/">The SIGMA</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/index.php/2018/04/22/vuejs-2-06/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
	</channel>
</rss>
