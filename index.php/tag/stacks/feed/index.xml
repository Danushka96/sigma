<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>stacks &#8211; The SIGMA</title>
	<atom:link href="/index.php/tag/stacks/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>&#60;For Those Who Code/&#62;</description>
	<lastBuildDate>
	Sat, 02 Mar 2019 16:57:34 +0000	</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.1.1</generator>
	<item>
		<title>Stack Abstract Data Type (With Implementation)</title>
		<link>/index.php/2018/04/05/stack-abstract-data-type-with-implementation/</link>
				<comments>/index.php/2018/04/05/stack-abstract-data-type-with-implementation/#respond</comments>
				<pubDate>Thu, 05 Apr 2018 16:58:09 +0000</pubDate>
		<dc:creator><![CDATA[Danushka Herath]]></dc:creator>
				<category><![CDATA[Algo]]></category>
		<category><![CDATA[algorithm]]></category>
		<category><![CDATA[problem solving]]></category>
		<category><![CDATA[stacks]]></category>

		<guid isPermaLink="false">/?p=504</guid>
				<description><![CDATA[<p><span class="rt-reading-time" style="display: block;"><span class="rt-label">Reading Time: </span> <span class="rt-time">5</span> <span class="rt-label rt-postfix">minutes</span></span> Stacks මුලින්ම මේ පාඩම් මාලාව හැඳින්වීමේදි අපි කතා කරා මොනවද මේ Data Structures කියන්නේ සහ ඇයි අපිට මේ දේවලි ඕන වෙන්නේ කියලා. ඒ ලිපිය බැලුවේ නැත්නම් මෙතනින් බලන්න. හරි අපි අද කතා කරන්න යන්නේ අපේ පළවෙනි Data Type එක ගැන. stacks කියන්නේ එක්තරා විදියක Operations කිහිපයකට සීමා වෙලා තියෙන Data<a class="moretag" href="/index.php/2018/04/05/stack-abstract-data-type-with-implementation/"> Read more&#8230;</a></p>
<p>The post <a rel="nofollow" href="/index.php/2018/04/05/stack-abstract-data-type-with-implementation/">Stack Abstract Data Type (With Implementation)</a> appeared first on <a rel="nofollow" href="/">The SIGMA</a>.</p>
]]></description>
								<content:encoded><![CDATA[<span class="rt-reading-time" style="display: block;"><span class="rt-label">Reading Time: </span> <span class="rt-time">5</span> <span class="rt-label rt-postfix">minutes</span></span><h2 style="text-align: center;"><span style="text-decoration: underline;"><em><strong>Stacks</strong></em></span></h2>
<p>මුලින්ම මේ පාඩම් මාලාව හැඳින්වීමේදි අපි කතා කරා මොනවද මේ Data Structures කියන්නේ සහ ඇයි අපිට මේ දේවලි ඕන වෙන්නේ කියලා. ඒ ලිපිය බැලුවේ නැත්නම් <a href="/index.php/2018/04/01/data-structures-i/">මෙතනින්</a> බලන්න.</p>
<p>හරි අපි අද කතා කරන්න යන්නේ අපේ පළවෙනි Data Type එක ගැන. stacks කියන්නේ එක්තරා විදියක Operations කිහිපයකට සීමා වෙලා තියෙන Data Type එකක්. ඒ කියන්නේ stack එක්ක අපිට කරන්න පුළුවන් වෙන්නේ <strong>Data ඇතුලට දාන එක, අන්තිමට දැම්ම Data එක ආපහු ගන්න එක හා අන්තිමට දැම්ම Data එක මොකද්ද කියලා බලන එක </strong>විතරයි. ඒකයි මේක ගොඩක්ම සරලම මට්ටමේ Data Type එකක් වෙන්නේ. මේ Data Type එකට Array එකකදි වගේ ඕන තැනකට Data දාන්නත් ඕන තැනකින් Data එළියට ගන්නත් බෑ. මේ Data Type එකට Data ගන්න සහ දාන්න පුළුවන් වෙන්නේ <strong>LIFO (Last In First out) </strong>කියන Method එකට අනුව. ඒ කියන්නේ ඔයාට මේ Data Type එකෙන් Data එකක් එළියට ගන්න ඕන නම් ගන්න පුළුවන් වෙන්නේ අන්තිමට ඇතුලට දැම්ම Data එක. තේරුනේ නැහැනේ? හරි අපි තව ටිකක් විස්තර ඇතිව බලමු.</p>
<h4><strong>FIFO කියන්නේ මොකක්ද?</strong></h4>
<p>සරලවම විස්තර කරන්න උදාහරණ කිහිපයක් කියන්නම්.</p>
<p><img class="alignleft wp-image-529 size-medium" src="/wp-content/uploads/2018/04/08182c_28256e3b807445e0b6d98ef62b9da917-204x300.png" alt="stack books" width="204" height="300" srcset="/wp-content/uploads/2018/04/08182c_28256e3b807445e0b6d98ef62b9da917-204x300.png 204w, /wp-content/uploads/2018/04/08182c_28256e3b807445e0b6d98ef62b9da917.png 250w" sizes="(max-width: 204px) 100vw, 204px" />හිතන්න මේ වගේ පොත් ගොඩක් හදන්න වුනොත් ඔයාට පොත් ටික අරගෙන පිළිවෙලට පොත් එකින් එක අරගෙන ගොඩ ගහන්න වෙනවනේ. දැන් හිතන්න ඔයා ආපහු ඔය පිලිවෙලට හදපු පොත් ගොඩින් එකින් එක පොත් ආපහු ගන්නවා කියලා. ඒ කියන්නේ ඔයාට <strong>මුලින්ම ගන්න වෙන්නේ අන්තිමට තිබ්බ පොත. </strong>ඔයා මුලින්ම තිබ්බ පොත ආපහු ගන්න වෙන්නේ අන්තිමට. Stack එකත් මෙන්න මේ උදාහරණයට සමානයි. පොත් කියන්නේ හරියට ඔයාගෙ Stack එක ඇතුලේ තියෙන එක එක Data වගේ. පොත් ගොඩගහනවා වගේ ඔයා මේ Stack එකට Data දාන්න යන්නේ.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><img class="alignright wp-image-530" src="/wp-content/uploads/2018/04/main-qimg-f2d56a823063de7de538c37a9f2f8d7b-c-225x300.jpg" alt="stack chairs" width="176" height="235" srcset="/wp-content/uploads/2018/04/main-qimg-f2d56a823063de7de538c37a9f2f8d7b-c-225x300.jpg 225w, /wp-content/uploads/2018/04/main-qimg-f2d56a823063de7de538c37a9f2f8d7b-c.jpg 338w" sizes="(max-width: 176px) 100vw, 176px" />තවත් උදාහරණයක් තමයි හැමෝම වගේ දැකලා ඇති පුටු මේ විදියට එක උඩ එක අහුරලා තියෙන විදිය. හැමෝම මේක ප්‍රායෝගික ජීවිතේදි කරලත් ඇතිනේ. මේකෙදිත් වෙන්නේ උඩදි කිවුව පොත් උදාහරණෙ වුන කතාවම තමයි. අන්තිමට දැම්ම පුටුව තමයි ආපහු ගද්දී මුලින්ම ගන්න වෙන්නේ.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><strong>Stack Operations</strong></h3>
<p>මේ ලිපියේ මුලදිත් මම සඳහන් කරා Stack එකක තියෙන මූලිකම Operations ගැන. දැන් හදන්නේ ඒවා ගැන විස්තරාත්මකව කතා කරගෙන යන්න.</p>
<ol>
<li>Push</li>
<li>Pop</li>
<li>Peek</li>
</ol>
<h5><strong>1.PUSH</strong></h5>
<p style="padding-left: 30px;">මේ Method එකෙදි කරන්නේ Stack එකට Data දාන එක. ඒ කියන්නේ Data දාන්නේ Stack එකේ Top එකට. ඒක වෙන්නේ කොහොමද කියලා උඩ උදාහරණත් එක්ක ඔයාලට තේරෙනවා ඇති කියලා හිතනවා. Stack එකකට Data Insert කරන්න තියෙන එකම Method එක PUSH කරන එක.</p>
<h5><strong>2.PULL</strong></h5>
<p style="padding-left: 30px;">මේ Method එක යොදාගෙන තමයි Stack එකේ උඩම තියෙන Data එක ආපහු එළියට ගන්න. ඒකෙදි වෙන්නේ Stack එකෙන් අයින් වෙලා Data එක එළියට එන එක.</p>
<h5><strong>3.PEEK</strong></h5>
<p style="padding-left: 30px;">මේකෙදි කරන්නේ Stack එකෙන් Data එක එළියට ගන්නේ නැතුව උඩම තියෙන Data එක මොකද්ද කියලා බලන ඒක. මේකෙදි Stack එකෙන් Data එක අයින් වෙන්නේ නෑ. නිකත් උඩ තියෙන්නේ මොකද්ද කියලා බලන එක විතරයි.</p>
<h2 style="text-align: center;"><span style="text-decoration: underline;"><strong>Implementation</strong></span></h2>
<p>Python:</p>
<pre>class Stack(object):

    def __init__(self):
        self._list = []

    def push(self, item):
        self._list.append(item)

    def pop(self):
        try:
            return self._list.pop()
        except IndexError:
            raise IndexError('pop from empty stack')
    def peek(self):
        try:
            print(_list[len(_list-1)])
        except IndexError:
            raise IndexError('empty stack')

def main():
    st = Stack()
    # Push and print
    for i in range(10):
        st.push(i)
        print("Pushed ", i)
    st.push('Hello World')

    # Pop
    print(st.pop())

    # Exceptions
    while True:  # Empty the stack
        try:
            st.pop()
        except Exception as e:
            print('Exception: {0}'.format(e))
            break


if __name__ == '__main__':
    main()
</pre>
<p>C:</p>
<pre>#include 
#include 

typedef struct stack {
	void *data;
	struct stack *next;
} Stack;

Stack *new_stack_node(void *data) {
	Stack *new_node = (Stack*) malloc(sizeof(Stack));
	if (new_node == NULL) {
		return NULL;
	}
	new_node -&gt; data = data;
	new_node -&gt; next = NULL;
	return new_node;
}

int push(Stack **stack, void *data) {
	Stack *new_node = new_stack_node(data);
	if (new_node == NULL) {
		return 0;
	}
	new_node -&gt; next = *stack;
	*stack = new_node;
	return 1;
}

void *pop(Stack **stack) {
	if (*stack == NULL) {
		return NULL;
	}
	Stack *temp = *stack;
	*stack = (*stack) -&gt; next;
	temp -&gt; next = NULL;
	void *data = temp -&gt; data;
	free(temp);
	return data;
}

int main() {
	int a = 5;
	float b = 6.0;
	char c[] = "Hello World!";
	Stack *st = NULL;
	push(&amp;st, (void*) (&amp;a));
	push(&amp;st, (void*) (&amp;b));
	push(&amp;st, (void*) (c));
	char *c_popped = (char*) pop(&amp;st);
	float b_popped = *((float*) pop(&amp;st));
	int a_popped = *((int*) pop(&amp;st));
	printf("%d %f %s\n", a_popped, b_popped, c_popped);
	if (pop(&amp;st) == NULL) {
		printf("Unable to pop from empty stack\n");
	}
	return 0;
}
</pre>
<p>තවත් Languages වලින් බලන්න <a href="https://github.com/Danushka96/algos/blob/master/stack">මෙතනින්</a> යන්න.</p>
<p><strong>දැන් අපි මේ ලියපු Stack එක භාවිතා කරලා විසදන්න පුළුවන් ගැටළු මොනවද කියලා පොඩ්ඩක් බලමු.</strong></p>
<h3><strong>1. Parenthesis </strong></h3>
<p>මේ ප්‍රශ්ණය තමයි අපි මොකක් හරි String එකක් දුන්නහම ඒ දුන්න String එක ඇතුලේ තියන වරහන් Balance වෙලා තියෙනවද කියලා බලන එක. උදාහරණයක් විදියට <strong>(3*[5+2])</strong> මේ කොටසේ වරහන් Balance වෙලා තියෙන්නේ කියලා පේනවනේ. හැබැයි මේ වගේ එකක් ගන්න. <strong>(5+(5]} </strong>මේක Balance වෙලා නෑ. අන්න ඒ දේ හඳුන ගන්න අපි කොහොමද මේ stack එක යොදා ගන්නේ.</p>
<p><strong>විසඳුම:</strong></p>
<ul>
<li style="padding-left: 30px;">අපි කරන්නේ අපිට Open Bracket(<strong>{[(</strong>) එකක් හම්බෙන හැම වෙලාවකම ඒක අපි Stack එකක් ඇතුලට දාගන්නවා.</li>
<li style="padding-left: 30px;">Close Bracket එකක් හම්බුණොත් අපි Stack එකෙන් එක පාරක් POP කරලා හම්බෙන Open Bracket එක අපේ Close Bracket එකට සමානයිද කියලා Check කරනවා. සමාන වුණොත් තවත් මේ විදියට ඉස්සරහට Check කරගෙන යනවා. නැත්නම් Program එක Close කරනවා ගැලපෙන්නේ නෑ කියලා.</li>
<li style="padding-left: 30px;">Bracket හැර හම්බෙන අනිත් හැම Character එකක්ම අපි නොසලකා හරිනවා.</li>
</ul>
<p>වැඩේ තේරුණේ නෑ වගේ නම් ආපහු මේ Image එක දිහා බලන්න.</p>
<p><img class=" wp-image-542 aligncenter" src="/wp-content/uploads/2018/04/stack-data-structure-12-728-300x277.jpg" alt="stack para" width="391" height="361" srcset="/wp-content/uploads/2018/04/stack-data-structure-12-728-300x277.jpg 300w, /wp-content/uploads/2018/04/stack-data-structure-12-728.jpg 590w" sizes="(max-width: 391px) 100vw, 391px" /></p>
<h3><strong>Implementation:</strong></h3>
<pre>class Stack():
    def __init__(self):
        self.items=[]

    def isEmpty(self):
        return self.items==[]

    def push(self,item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)

x=str(input("Enter the Statement"))
s1=Stack()

u=0
d=0
for k in x:
    if k=='[' or k=='(' or k=='{':
        s1.push(k)
        d+=1

    elif k==']' or k==')' or k=='}':
        a=s1.pop()
        print(a,k)
        if (a=='(' and k==')') or (a=='[' and k==']') or (a=='{' and k=='}'):
            u+=1
            
        else:
            print("Not a Parantheses")

if u==d:
    print("This is a Parantheses")
</pre>
<p>&nbsp;</p>
<h3><strong>2. Palindrome</strong></h3>
<p>මේ ප්‍රශ්ණෙ තමයි මුල ඉඳලා අගට කියෙවුවත් අග ඉඳලා මුලට කියෙවුවත් සමාන විදියට ශබ්ද වෙන වචන හොයන එක. උදාහරණයක් විදියට <strong>MADAM </strong>වගේ.</p>
<p><strong>විසඳුම:</strong></p>
<p style="padding-left: 30px;">මේ ප්‍රශ්නෙ විසඳන්න අපි කරන්නේ මේ වගේ වැඩක්. අපිට දෙන String එක Stack එකකට දාගෙන ඒකෙන් POP කරගෙන තවත් Stack එකක් හදා ගන්නවා. ඒ කියන්නේ මේකෙදි Stacks දෙකක් යොදා ගන්න වෙනවා.  ඊට පස්සේ පළවෙනි Stack එකට ආපහු අර String එක දාගෙන මේ Stack දෙකෙන් POP කර කර බලනවා හැම element එකක්ම සමාන වෙනවද කියලා. POP කරන හැම සැරේකම Elements සමාන වෙනවා කියන්නේ මේක Palindrome එකක් වෙනවා.</p>
<p><strong>Implementation: </strong></p>
<p>මේකෙ Implementation එක මම කරලා තියෙන්නේ Stack Class එකටමයි. එහෙම නැතුව වෙනම කරන්නත් පුළුවන් අවුලක් නැතුව.</p>
<pre>class Stack(object):
    def __init__(self,items):
        self.items=[]
        for e in items:
            self.push(e)

    def push(self,item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def __repr__(self):
        return str(self.items)  

    def isPalindrome(self):
        tr=Stack([])
        t=Stack(self.items)
        while t.items:
            tr.push(t.pop())
        t=Stack(self.items)    
        while t.items and tr.items:
            c1=t.pop()
            c2=tr.pop()
            print c1,c2
            if c1!=c2: return False
        return True    
</pre>
<p><b>තවත් මේ Stack එක භාවිතා කරලා විසඳන්න පුළුවන් ප්‍රශ්ණ තියෙනවා Post Fix Expressions වගේ ගැටළු. ඒවාට පුළුවන්නම් උත්සාහ කරලා බලන්න. Code එකේ මොනවා හරි ප්‍රශ්ණයක් තිබුණොත් Comment කරන්න උදව් කරන්නම්&#8230;</b></p>
<p><b>ඊළඟ පාඩම QUEUES.  </b></p>
<p>The post <a rel="nofollow" href="/index.php/2018/04/05/stack-abstract-data-type-with-implementation/">Stack Abstract Data Type (With Implementation)</a> appeared first on <a rel="nofollow" href="/">The SIGMA</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/index.php/2018/04/05/stack-abstract-data-type-with-implementation/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
	</channel>
</rss>
