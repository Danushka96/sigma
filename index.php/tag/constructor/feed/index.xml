<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>constructor &#8211; The SIGMA</title>
	<atom:link href="/index.php/tag/constructor/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>&#60;For Those Who Code/&#62;</description>
	<lastBuildDate>
	Sat, 02 Mar 2019 16:57:34 +0000	</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.1.1</generator>
	<item>
		<title>Interface</title>
		<link>/index.php/2018/04/13/interface/</link>
				<comments>/index.php/2018/04/13/interface/#respond</comments>
				<pubDate>Fri, 13 Apr 2018 04:38:20 +0000</pubDate>
		<dc:creator><![CDATA[Gayan Sampath]]></dc:creator>
				<category><![CDATA[OOP]]></category>
		<category><![CDATA[abstract class]]></category>
		<category><![CDATA[constructor]]></category>
		<category><![CDATA[final]]></category>
		<category><![CDATA[inheritance]]></category>
		<category><![CDATA[static]]></category>

		<guid isPermaLink="false">/?p=855</guid>
				<description><![CDATA[<p><span class="rt-reading-time" style="display: block;"><span class="rt-label">Reading Time: </span> <span class="rt-time">3</span> <span class="rt-label rt-postfix">minutes</span></span> ආයුබෝවන් යාලුවවෝ හැමෝටම&#8230;oop පාඩම් මාලාවේ අවසන් පාඩමට ඔයාලා හැමෝම සාදරයෙන් පිලිගන්නවා&#8230;ඔයාලා දිගටම අපිත් එක්ක රැදී හිටියනම් මේ වෙනකොටත් oop වල තියන ගොඩක් දේවල් ඉගෙන ගෙන හමාරයි&#8230;oop වල මොකක් හරි පාඩමක් මග හැරුනනම් මෙතනින් ගිහින් බලන්න පුලුවන්&#8230;oop වල අවසාන්ම පාඩමෙන් මං කතා කරන්න බලාපොරොත්තු වෙන්නේ interface ගැන&#8230;පුරුදු විදියටම මුලින්ම මම කලින්<a class="moretag" href="/index.php/2018/04/13/interface/"> Read more&#8230;</a></p>
<p>The post <a rel="nofollow" href="/index.php/2018/04/13/interface/">Interface</a> appeared first on <a rel="nofollow" href="/">The SIGMA</a>.</p>
]]></description>
								<content:encoded><![CDATA[<span class="rt-reading-time" style="display: block;"><span class="rt-label">Reading Time: </span> <span class="rt-time">3</span> <span class="rt-label rt-postfix">minutes</span></span><p><img class="alignnone size-medium wp-image-112" src="/wp-content/uploads/2018/03/oop-300x172.png" alt="" width="300" height="172" srcset="/wp-content/uploads/2018/03/oop-300x172.png 300w, /wp-content/uploads/2018/03/oop.png 500w" sizes="(max-width: 300px) 100vw, 300px" /></p>
<p>ආයුබෝවන් යාලුවවෝ හැමෝටම&#8230;oop පාඩම් මාලාවේ අවසන් පාඩමට ඔයාලා හැමෝම සාදරයෙන් පිලිගන්නවා&#8230;ඔයාලා දිගටම අපිත් එක්ක රැදී හිටියනම් මේ වෙනකොටත් oop වල තියන ගොඩක් දේවල් ඉගෙන ගෙන හමාරයි&#8230;oop වල මොකක් හරි පාඩමක් මග හැරුනනම් <a href="/index.php/category/oop/">මෙතනින්</a> ගිහින් බලන්න පුලුවන්&#8230;oop වල අවසාන්ම පාඩමෙන් මං කතා කරන්න බලාපොරොත්තු වෙන්නේ interface ගැන&#8230;පුරුදු විදියටම මුලින්ම මම කලින් පාඩම පොඩ්ඩක් මතක් කරලා ඉන්නම්කෝ&#8230;කලින් පාඩමේදී අපි කතා කලා abstract classes ගැන&#8230;body එකක් නැති එහෙමත් නැත්නම් meaningless body එකක් තියන method එකක් හරි ඊට වැඩි ගානක් හරි තියන class එකකට අපි කිව්වා abstract class එකක් කියලා&#8230;තව abstract class ගැන ගොඩක් විස්තර කතා කලා කලින් පාඩමේ..කලින් පාඩමේ තිබුන හැම දෙයක්මනම් මතක් කරන්න යන්නේ නෑ&#8230;අමතක නම් හරි අපෙ කලින් පාඩම බැලුවෙ නැත්තම් හරි මෙන්න <a href="/index.php/2018/04/12/abstract-class/">මෙතනින්</a> ගිහින් ඉක්මනට බලලා එන්නකෝ..</p>
<p>හරි එහෙනම් අපි දැන් බලමු අද පාඩම ගැන..අද පාඩම interface කියලා මම කලින් කිව්වනේ..හරි එහෙනන් අපි මුලින්ම බලමු interface එකක් කියන්නේ මොකද්ද කියලා&#8230;interface කියන්නේ මොකද්ද කියලා කියන්න කලින් මං කියන්නම් ඇයි interface පාවිච්චි කරන්නේ කියලා&#8230;.හරි අපි කලින් පාඩමකින් කතා කලානේ <a href="/index.php/2018/03/25/object-oriented-programming-5/" target="_blank" rel="noopener">inheritance</a> ගැන&#8230;එතනදී අපි කලේ එක class එකකින් තවත් class. එකක් inherit කරපු එකනේ&#8230;ඒ කියන්නේ එක inheritance එකයි තිබුනේ&#8230;multiple inheritance ගැන අපි කතා කලේ වත් නෑනේ නේද&#8230;එහෙම කලේ multiple inheritance java වල නැති නිසා&#8230;(C++ වල නම් තියනවා) &#8230;multiple inheritance කියන්නේ මේ වගේ එකකට&#8230;</p>
<pre>class A{

      // statement

}

class B{

    // statement

}

class C extends <strong>A,B</strong>{

     // statement

}

</pre>
<p>ඔන්න ඕකට තමයි multiple inheritance කියලා කියන්නේ&#8230;<strong>එක class එකක් class ගොඩකින් inherit වෙන එකට</strong>&#8230;ඔන්න ඔය දේ කරන්න java language එකේ ඉඩදෙන්නේ නෑ&#8230;අන්න ඒ දුර්වලතාව මගහැර ගන්න තමයි interface පාවිච්චි කරන්නේ&#8230;interface එක හැසිරීම class එකකට ගොඩක් දුරට සමානයි&#8230;නමුත් class එකක් නම් නෙවෙයි&#8230;interface වලින් පුලුවන් class කිහිපයක තියන ලක්ෂණ එක class එකකට ගන්න&#8230;හරියට නිකන් inheritance පාවිච්චි කලා වගේ..abstract class ගැන කතා කලා වගේම interface වල තියන ලක්ෂණ ටිකක් මුලින්ම මං කියන්නම්&#8230;</p>
<p>interface එකක් අපි define කරන්නේ interface කියලා දාලා interface එකේ නම ලියනවා..මෙන්න මේ විදියට..</p>
<pre>interface myInterface{

// statement

}
</pre>
<p>ඔන්න ඔහොමයි interface එකක් define කරන්නේ&#8230;</p>
<p>interface එකක තියෙන තවත් විශේෂත්වයක් තමයි interface එකක තියා ගන්න පුලුවන් abstract methods විතරයි.. interface එකක් ඇතුලේ තියා ගන්නේ abstract method විතරයිනම් interface එකත් abstract වෙන්න ඕනි නේද&#8230;.interface එක abstract වූනා කියන්නේ object හදන්නත් බැහැ &#8230;object හදන්න බෑ කියන්නේ constractor එකකුත් නෑ නේද.. තව දෙයක් තියනවා , interface එකක් ඇතුලේ තියන methods ඔක්කොම public වෙන්නත් ඕනි abstract වෙන්නත් ඕනි static වෙන්නත් ඕනි&#8230;ඒ වගේම interface එක ඇතුලේ තියන attributes ඔක්කොම public වෙන්නත් ඕනි static වෙන්නත් ඕනි final වෙන්නත් ඕනි..තවත් දෙයක් තීයනවා.intercace එකක reference variable එකකට පුලුවන් implements වුන class එකේ objects store කරගන්නත්..හරියට නිකන් මෙන්න මේ වගේ..</p>
<pre>interface A{
     // statement
}

class B implements A{
     //  statement
}

class Demo {
     public static void main(String a[]){
   
             interface A=new B() // upcasting 

     }

}
</pre>
<p>ඕන්න ඔය ටික තමයි interface එකක තියන ප්‍රධාන විශේෂත්ව&#8230;</p>
<p>හරි දැන් අපි බලමු interface පාවිචි කරන්නේ කොහොමද කියලා&#8230;කලින් මං කිව්වනේ interface කියන්නෙත් inheritance වගේ කියලා&#8230;inheritance වලදි නම් එක class එකකින් තවත් class එකක් inherit කරන්නේ extends keyword එක පාවිච්චි කරලනේ&#8230;interface එකක් නම් implements  keyword එක දාලා තමයි class එකට සම්බන්ද කරන්නේ&#8230;මේ විදියට interface ඕනි ගානකින් එක class එකක් imlements කරන්න පුලුවන්..</p>
<pre>interface A{

         abstract void a();          // abstract method of interface A..

}

interface B{

         abstract void b();         // abstract method of interface B..

}

class X{

        int x;

        void a(){

        // statement ;               // not an abstract method

        }

}

class Demo extends X implements A,B{

       // statements;

}
</pre>
<p>Demo class එක X ගෙන් inherit කරලා තියනවා, A හා B ගෙන් imlements කරලා තියනවා&#8230;හරි ඔන්න ඔය විදියට තමයි class එකක් interface එකකින් implements කරන්නේ..හරි තේරුනා නේද වැඩේ&#8230;.interface ගැන ඉතිං ඔච්චරයි කියන්න තියෙන්නේ😃😃😃&#8230;තේරුනා නේද අද පාඩම&#8230;.ඔන්න ඔය පාඩමත් සමගම අපේ oop පාඩම් මාලාවත් නිමාවෙනවා&#8230;oop වල මොකක් හරි අව්ලක් ආවොත් ඉක්මනට comment එකක් දාන්න&#8230;අපි සූදානම් ඔයාලට උදව් කරන්න..හරි එහෙනන් මට යන්න අවසරයි 😃😃😃&#8230;තවත් අලුත් පාඩම් මාලාවක් සමගින් ඉක්මනටම හමුවෙමු&#8230;ස්තූතියි !</p>
<p>The post <a rel="nofollow" href="/index.php/2018/04/13/interface/">Interface</a> appeared first on <a rel="nofollow" href="/">The SIGMA</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/index.php/2018/04/13/interface/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
	</channel>
</rss>
